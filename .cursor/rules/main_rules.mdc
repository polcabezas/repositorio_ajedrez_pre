---
description: 
globs: 
alwaysApply: false
---
---
description:
globs:
alwaysApply: true
---
# IMPORTANT RULES FOR YOU TO FOLLOW!!!
- Always create code in a OOP approach when coding in Python
- Always use the framework of Model, View, Controller to generate the code structure
- Everytime you create a new file check the file structure below and consciosly decide where is the best place to put the file
- You live and breath under the mantra: the simpler the better!
- Modular and well organized code
- Examine all the existing code in order to add new functionallities properly
- Add comments on every function defined to know what it does
- Make good comments, that are actually useful for later revising the code
- When adding new code, always plan what are you wanting to do, and then move onto modifying it in the actual code
- Before adding any single line of code think if it's worth it or not -> remember, keep it simple
- Before implementing any code, explain to me what you've understood that you have to do in detail
- When running code from the root directory use this code snippet: "os.path.join(os.getcwd(), '.env')" to make sure you are using the root directory no matter what relative path you are in
- All the tests performed need to be done using the pytest library. This is to keep a uniform test library throuout all the files
- Keep just 1 class definition for every file you create. If you need to use more than 1 class to code the feature, create a dedicated file for each classs
- If you delete a part of the code, don't keep the deleted part commented or even mention that deleted part.
- Always take the credentials for any auth from the config.py file where every credential is retrieved from the .env file. Don't retrieve the credentials from the .env file every time.


#File Structure:
repositorio_ajedrez_pre/
│
├── .env                # Environment variables (credentials, API keys)
├── .env.example        # Example environment file
├── .gitignore          # Specifies intentionally untracked files that Git should ignore
├── main.py             # Main script to start the game, initializes MVC components
│
├── models/             # Contains the game's data and logic (The "brain")
│   ├── __init__.py
│   ├── game_state.py   # Manages the overall game status
│   ├── board.py        # Represents the chessboard and piece positions
│   ├── piece.py        # Base class for pieces
│   ├── pieces/         # Specific piece logic
│   │   ├── __init__.py
│   │   └── ...         # Individual piece classes (e.g., pawn.py, king.py)
│   └── move_validator.py # Logic for validating moves
│
├── views/              # Handles presentation and user interface (What the user sees)
│   ├── __init__.py
│   └── gui_view.py     # Draws the board, pieces, player info, etc.
│   # Potentially assets/, ui_elements/ sub-folders later
│
├── controllers/        # Manages user input and communication between Model and View
│   ├── __init__.py
│   └── game_controller.py # Processes input, updates Model, tells View to refresh
│
├── assets/             # Static files (e.g., images, requirement docs)
│   ├── __init__.py
│   └── ...             # Image files (.png), Documents (.md, .pdf)
│
├── chats/              # Stores conversation logs with the AI assistant
│   ├── __init__.py
│   └── ...             # Chat history files (.md)
│
├── .venv/              # Virtual environment files (usually excluded from git)
├── .git/               # Git repository files (hidden)
└── .cursor/            # Cursor configuration files (hidden)
    └── rules/          # Rules for the AI assistant
        ├── main_rules.mdc
        └── chats_rules.mdc







